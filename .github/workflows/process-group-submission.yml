name: Process New Group Submission

on:
  issues:
    types: [opened, edited]

jobs:
  process-submission:
    if: contains(github.event.issue.labels.*.name, 'New Group')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Create script directory
        run: mkdir -p .github/scripts

      - name: Create processing script
        run: |
          cat > .github/scripts/process_group_submission.py << 'EOF'
          import os
          import re
          import yaml
          import json
          import sys
          from urllib.parse import urlparse

          # Get environment variables
          issue_number = os.environ.get('ISSUE_NUMBER')
          issue_body = os.environ.get('ISSUE_BODY')

          # Extract form data
          def extract_form_data(body):
              # Regex to extract each field from the issue body
              platform_match = re.search(r'### Platform\s*\n\n(.*?)(\n|$)', body)
              name_match = re.search(r'### Group Name\s*\n\n(.*?)(\n|$)', body)
              url_match = re.search(r'### Group URL\s*\n\n(.*?)(\n|$)', body)
              continent_match = re.search(r'### Continent\s*\n\n(.*?)(\n|$)', body)
              country_match = re.search(r'### Country\s*\n\n(.*?)(\n|$)', body)
              city_match = re.search(r'### City\s*\n\n(.*?)(\n|$)', body)
              tags_match = re.search(r'### Tags\s*\n\n(.*?)(\n|$)', body)
              description_match = re.search(r'### Description\s*\n\n([\s\S]*?)(?=\n\n###|$)', body)
              
              return {
                  'platform': platform_match.group(1).strip() if platform_match else None,
                  'name': name_match.group(1).strip() if name_match else None,
                  'url': url_match.group(1).strip() if url_match else None,
                  'continent': continent_match.group(1).strip() if continent_match else None,
                  'country': country_match.group(1).strip() if country_match else '',
                  'city': city_match.group(1).strip() if city_match else '',
                  'tags': [tag.strip() for tag in tags_match.group(1).split(',')] if tags_match and tags_match.group(1).strip() else [],
                  'description': description_match.group(1).strip() if description_match else ''
              }

          # Validate data
          def validate_data(data):
              errors = []
              
              if not data['name']:
                  errors.append("Group name is required")
              
              if not data['url']:
                  errors.append("Group URL is required")
              else:
                  # Basic URL validation
                  try:
                      result = urlparse(data['url'])
                      if not all([result.scheme, result.netloc]):
                          errors.append("Invalid URL format")
                  except:
                      errors.append("Invalid URL format")
              
              if not data['platform']:
                  errors.append("Platform is required")
                  
              if not data['continent']:
                  errors.append("Continent is required")
              
              return errors

          # Generate YAML entry
          def generate_yaml_entry(data):
              platform_map = {
                  'WhatsApp': 'whatsapp',
                  'Telegram': 'telegram',
                  'Discord': 'discord',
                  'Facebook': 'facebook',
                  'WeChat': 'wechat'
              }
              
              platform_key = platform_map.get(data['platform'], data['platform'].lower())
              
              entry = {
                  'name': data['name'],
                  'platform': platform_key,
                  'url': data['url'],
                  'location': {
                      'continent': data['continent'],
                  }
              }
              
              if data['country']:
                  entry['location']['country'] = data['country']
              
              if data['city']:
                  entry['location']['city'] = data['city']
              
              if data['tags']:
                  entry['tags'] = data['tags']
                  
              if data['description']:
                  entry['description'] = data['description']
                  
              return entry

          # Process the submission
          try:
              data = extract_form_data(issue_body)
              validation_errors = validate_data(data)

              if validation_errors:
                  # Output errors
                  print(f"::set-output name=valid::false")
                  error_message = "The following errors were found:\\n\\n" + "\\n".join([f"- {error}" for error in validation_errors])
                  print(f"::set-output name=message::{error_message}")
                  sys.exit(0)

              # Check if directory.yaml exists, if not create a basic structure
              yaml_file = 'directory.yaml'
              if not os.path.exists(yaml_file):
                  directory = {'version': '1.0', 'groups': []}
              else:
                  # Read current YAML file
                  with open(yaml_file, 'r') as file:
                      directory = yaml.safe_load(file) or {'version': '1.0', 'groups': []}
                  
                  # Make sure the structure is valid
                  if 'groups' not in directory:
                      directory['groups'] = []

              # Generate new entry
              new_entry = generate_yaml_entry(data)

              # Add to directory
              directory['groups'].append(new_entry)

              # Write updated YAML
              with open(yaml_file, 'w') as file:
                  yaml.dump(directory, file, sort_keys=False, default_flow_style=False)

              # Output success
              print(f"::set-output name=valid::true")
              print(f"::set-output name=group_name::{data['name']}")
              print(f"::set-output name=platform::{data['platform']}")
              location_str = f"{data['continent']}"
              if data['country']:
                  location_str += f", {data['country']}"
              if data['city']:
                  location_str += f", {data['city']}"
              print(f"::set-output name=location::{location_str}")
              print(f"::set-output name=message::Your submission has been processed successfully!")
              
          except Exception as e:
              print(f"::set-output name=valid::false")
              print(f"::set-output name=message::An error occurred: {str(e)}")
              sys.exit(1)
          EOF

      - name: Make script executable
        run: chmod +x .github/scripts/process_group_submission.py

      - name: Process Issue Form
        id: process
        run: |
          python .github/scripts/process_group_submission.py
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_BODY: ${{ toJSON(github.event.issue.body) }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        if: steps.process.outputs.valid == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add new group from issue #${{ github.event.issue.number }}"
          title: "Add: ${{ steps.process.outputs.group_name }}"
          body: |
            Adds a new group from issue #${{ github.event.issue.number }}

            Group details:
            - Name: ${{ steps.process.outputs.group_name }}
            - Platform: ${{ steps.process.outputs.platform }}
            - Location: ${{ steps.process.outputs.location }}

            Automatically generated from form submission.
          branch: add-group-${{ github.event.issue.number }}
          base: main

      - name: Comment on Issue
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Thanks for your submission!

            ${{ steps.process.outputs.message }}

            ${{ steps.process.outputs.valid == 'true' && format('A pull request has been created to add this group. It will be reviewed shortly.') || 'Please fix the issues above and we will process your submission.' }}
